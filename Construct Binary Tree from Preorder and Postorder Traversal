class Solution {
    private int position(int num, int[] post) {
        for (int i = 0; i < post.length; i++) {
            if (num == post[i]) {
                return i;
            }
        }
        return -1;
    }
    
    private TreeNode solve(int[] pre, int start, int[] post, int sidx, int eidx) {
        if (start >= pre.length || sidx > eidx) {
            return null;
        }
        
        TreeNode root = new TreeNode(pre[start]);
        if (start + 1 >= pre.length || sidx == eidx) {
            return root;
        }
        
        int pos = position(pre[start + 1], post);
        
        root.left = solve(pre, start + 1, post, sidx, pos);
        root.right = solve(pre, start + pos - sidx + 2, post, pos + 1, eidx - 1);
        
        return root;
    }
    
    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {
        if (preorder.length == 0) {
            return null;
        }
        return solve(preorder, 0, postorder, 0, postorder.length - 1);
    }
}
