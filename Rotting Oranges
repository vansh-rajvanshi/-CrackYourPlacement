class Solution {
    class Pair{
        int x;
        int y;
        public Pair(int x,int y){
            this.x=x;
            this.y=y;
        }
    }
    public int orangesRotting(int[][] grid) {
        int fresh=0,time=0,n=grid.length,m=grid[0].length;
        Queue<Pair> q=new LinkedList<>();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.add(new Pair(i,j));
                }else if(grid[i][j]==1){
                    fresh++;
                }
            }
        }
        if(fresh==0){
            return 0;
        }
        while(!q.isEmpty()){
            int size=q.size();
            boolean rotted=false;
            for(int i=0;i<size;i++){
                Pair p=q.remove();
                int x1=p.x;
                int y1=p.y; 
                int [] ax={1,-1,0,0};
                int [] ay={0,0,-1,1};
                for(int j=0;j<4;j++){
                    int x=ax[j]+x1;
                    int y=ay[j]+y1;
                    if(isValid(x,y,n,m,grid)){
                        grid[x][y]=2;
                        fresh--;
                        rotted=true;
                        q.add(new Pair(x,y));
                    }
                }
            }
            if(rotted){
                time++;
            }
        }
        return fresh>0 ?-1 : time;
    }
    private boolean isValid(int x,int y,int n,int m,int[][]grid){
        return x>=0 && x<n && y>=0 && y<m && grid[x][y]==1;
    }
}
