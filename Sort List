class Solution {
    public ListNode middleNode(ListNode head){
        ListNode slow=head;
        ListNode fast=head.next;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode mid=middleNode(head);
        ListNode rightHalf=mid.next;
        mid.next=null;
        ListNode left=sortList(head);
        ListNode right=sortList(rightHalf);
        return merge(left,right);
    }
    public ListNode merge(ListNode head1,ListNode head2){
        ListNode mergell=new ListNode(-1);
        ListNode temp=mergell;
        while(head1!=null && head2!=null){
            if(head1.val<=head2.val){
                temp.next=head1;
                temp=temp.next;
                head1=head1.next;
            }else{
                temp.next=head2;
                temp=temp.next;
                head2=head2.next;
            }
        }
        if(head1!=null){
            temp.next=head1;
            temp=temp.next;
            head1=head1.next;
        }
        if(head2!=null){
            temp.next=head2;
            temp=temp.next;
            head2=head2.next;
        }
        return mergell.next;
    }
}
