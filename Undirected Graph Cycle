class Solution {
    public boolean dfsutil(ArrayList<ArrayList<Integer>> adj, int curr, int parent, boolean[] visited) {
        visited[curr] = true;
        for (int i = 0; i < adj.get(curr).size(); i++) {
            int neig = adj.get(curr).get(i);
            if (visited[neig] && neig != parent) {
                return true;
            } else if (!visited[neig]) {
                if (dfsutil(adj, neig, curr, visited)) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V];
        for (int i = 0; i < V; i++) {
            if (!visited[i] && dfsutil(adj, i, -1, visited)) {
                return true;
            }
        }
        return false;
    }
}
