class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V];
        ArrayList<Integer> list = new ArrayList<>();
        
        dfs(0, adj, visited, list);
        
        return list;
    }
    
    private void dfs(int node, ArrayList<ArrayList<Integer>> adj, boolean[] visited, ArrayList<Integer> list) {
        visited[node] = true;
        list.add(node);
        
        for (int i = 0; i < adj.get(node).size(); i++) {
            int neighbour = adj.get(node).get(i);
            if (!visited[neighbour]) {
                dfs(neighbour, adj, visited, list);
            }
        }
    }
}
