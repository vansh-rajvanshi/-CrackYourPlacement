class Solution {
    ListNode head = null, tail = null;

    public void add(int data) {
        ListNode newNode = new ListNode(data);
        if (head == null) {
            head = tail = newNode;
            return;
        }
        tail.next = newNode;
        tail = newNode;
    }

    public ListNode reverse(ListNode node) {
        ListNode prev = null;
        ListNode curr = node;
        while (curr != null) {
            ListNode nextt = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextt;
        }
        return prev;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head1 = reverse(l1);
        ListNode head2 = reverse(l2);
        int carry = 0;

        while (head1 != null && head2 != null) {
            int sum = head1.val + carry + head2.val;
            add(sum % 10);
            carry = sum / 10;
            head1 = head1.next;
            head2 = head2.next;
        }

        while (head1 != null) {
            int sum = head1.val + carry;
            add(sum % 10);
            carry = sum / 10;
            head1 = head1.next;
        }

        while (head2 != null) {
            int sum = head2.val + carry;
            add(sum % 10);
            carry = sum / 10;
            head2 = head2.next;
        }

        while (carry > 0) {
            add(carry % 10);
            carry /= 10;
        }

        return reverse(head);
    }
}
