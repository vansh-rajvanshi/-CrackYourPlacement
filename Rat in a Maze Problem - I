class Solution {
    private void dfs(int[][]mat,int row,int col,boolean[][]visited,ArrayList<String> path,String str){
        if(row<0 || col<0 || row>=mat.length || col>=mat.length || visited[row][col]==true || mat[row][col]==0){
            return;
        }
        if(row==mat.length-1 && col==mat.length-1){
            path.add(str);
            return;
        }
        visited[row][col]=true;
        dfs(mat,row+1,col,visited,path,str+"D");
        dfs(mat,row-1,col,visited,path,str+"U");
        dfs(mat,row,col+1,visited,path,str+"R");
        dfs(mat,row,col-1,visited,path,str+"L");
        visited[row][col]=false;
    }
    public ArrayList<String> findPath(int[][] mat) {
        int n=mat.length;
        ArrayList<String> path=new ArrayList<>();
        boolean[][]visited=new boolean[n][n];
        dfs(mat,0,0,visited,path,"");
        return path;
    }
}
