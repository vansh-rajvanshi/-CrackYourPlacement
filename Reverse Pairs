class Solution {
    public int mergeSort(int[] nums, int start, int end) {
        int count = 0;
        if (start >= end) {
            return count;
        }
        int mid = start + (end - start) / 2;
        count += mergeSort(nums, start, mid);
        count += mergeSort(nums, mid + 1, end);
        count += countPair(nums, start, mid, end);
        merge(nums, start, mid, end);
        return count;
    }

    public void merge(int[] nums, int start, int mid, int end) {
        int i = start, j = mid + 1, k = 0;
        int[] temp = new int[end - start + 1];
        while (i <= mid && j <= end) {
            if (nums[i] <= nums[j]) {
                temp[k++] = nums[i++];
            } else {
                temp[k++] = nums[j++];
            }
        }
        while (i <= mid) {
            temp[k++] = nums[i++];
        }
        while (j <= end) {
            temp[k++] = nums[j++];
        }
        for (i = start, k = 0; i <= end; i++, k++) {
            nums[i] = temp[k];
        }
    }

    public int countPair(int[] nums, int start, int mid, int end) {
        int j = mid + 1;
        int count = 0;
        for (int i = start; i <= mid; i++) {
            while (j <= end && (long)nums[i] > 2 * (long)nums[j]) {
                j++;
            }
            count += j - (mid + 1);
        }
        return count;
    }

    public int reversePairs(int[] nums) {
        return mergeSort(nums, 0, nums.length - 1);
    }
}
